{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAiCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MA1CPL,EAAKa,iBAAiB,UAGtB,SAAeC,GACbA,EAAIC,iBAIJ,IAFA,IAAgCC,EAAAF,EAAIG,OAAOC,SAAnCC,EAAwBH,EAAxBX,MAAOe,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEZC,EAAI,EAAGA,EAAID,EAAOE,MAAOD,GAAK,EAAG,CACxC,IAAIE,EAAWF,EAAI,EAEfG,EAASC,OAAOP,EAAMI,OAASG,OAAON,EAAKG,OAASD,EAExDnB,EAAcqB,EAAUC,GACrBE,MAAK,SAAAC,GACJ,IAAQxB,EAAoBwB,EAApBxB,SAAUC,EAAUuB,EAAVvB,MAClBwB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,OAEhD4B,QAAQC,IAAI,uBAAwCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,UAE3D8B,OAAM,SAAAP,GACL,IAAQxB,EAAoBwB,EAApBxB,SAAUC,EAAUuB,EAAVvB,MAClBwB,EAAA/B,GAASgC,OAAOM,QACd,sBAAuCJ,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,OAE/C4B,QAAQC,IAAI,sBAAqCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,cAzB/DL,EAAKa,iBAAiB,QAASwB,S","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', onSub);\nform.addEventListener('input', onInput);\n\nfunction onSub(evt) {\n  evt.preventDefault();\n\n  const { delay, step, amount } = evt.target.elements;\n  // console.log(delay, step, amount);\n  for (let i = 0; i < amount.value; i += 1) {\n    let position = i + 1;\n\n    let passed = Number(delay.value) + Number(step.value) * i;\n\n    createPromise(position, passed)\n      .then(object => {\n        const { position, delay } = object;\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(object => {\n        const { position, delay } = object;\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","_elements","target","elements","delay1","step","amount","i","value","position1","passed","Number","then","object","$parcel$interopDefault","Notify","success","concat","console","log","catch","failure","onInput"],"version":3,"file":"03-promises.bb9c70e0.js.map"}